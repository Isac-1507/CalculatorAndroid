name: Build Android
run-name: Creating Production Ready Android App ðŸš€
on:
  push:
    tags:
      - 'v*.*.*'  # This triggers the workflow on version tags like v1.0.0
  workflow_dispatch:
  #push:
   # branches:
    #  - main

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    # TODO: add the default directory - COMMENT IF IT'S NOT IN SUBFOLDER
    # defaults:
    #   run:
    #     working-directory: ./frontend
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        # TODO: add your branch to checkout
        with:
          ref: main
      - name: Print Dir
        run: pwd
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 21.x

      - name: install dependencies
        run: npm ci

      - name: Create Build Folder
        run: npm run build

      - name: Add android folder if not present
        run: if [ ! -d "./android" ]; then npx cap add android; fi

      - name: Capacitor sync
        run: npx cap sync

      # TODO: Check for folder structure in README for generating splash screen
      - name: Generate icons and splash screen to android folder
        run: if [ -d "./resources" ]; then npm install @capacitor/assets --save-dev && npx capacitor-assets generate --android; fi

      - name: Build app bundle
        run: cd android && ./gradlew bundle && ./gradlew assembleDebug

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign dev build
        run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

      - name: Check folder content of android output
        run: ls ./android/app/build/outputs/bundle/release

      - name: Set version
        id: version
        run: echo "VERSION=v0.0.${GITHUB_RUN_NUMBER}" >> "$GITHUB_OUTPUT"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

      - name: Upload Release Asset .apk
        id: upload-release-asset-apk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./android/app/build/outputs/apk/debug/app-debug.apk
          # Customize the asset name. If not specified, the file name is used.
          asset_name: app-debug.apk
          asset_content_type: application/vnd.android.package-archive
          
      - name: Set up Git user
        run: |
         git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
         git config --global user.name "github-actions[bot]"
      
      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.TARGET_REPO_TOKEN }}"
      
      - name: Debug TAG_NAME
        run: |
            TAG_NAME=${{ github.ref }}
            TAG_NAME=${TAG_NAME#refs/tags/}
            echo "TAG_NAME=${TAG_NAME}"
      - name: List existing tags
        run: git tag -l
          

      - name: Verify gh CLI authentication
        run: gh auth status
      
      - name: Clone Priv Repo
        run: |
            cd ..
            gh repo clone https://github.com/Isac-1507/CalcAndroidReleases
            cd CalcAndroidReleases
      - name: PWD
        run: | 
            pwd
      - name: Delete existing tag locally and remotely
        if: ${{ always() }}
        run: |
            git tag -d "${{ github.ref }}"
            git push --tags

    
      - name: Create Tag and Release
        run: |
            git config --global user.email "I.Evans2010@proton.me"
            git config --global user.name "Isac-1507"
            git commit --allow-empty -m "Release Commit"
            git tag $TAG_NAME
            git push --tags
            git push
            gh release create $TAG_NAME --repo Isac-1507/CalcAndroidReleases --title "Release ${TAG_NAME}" --notes "Release .aab" /home/runner/work/CalculatorAndroid/CalculatorAndroid/android/app/build/outputs/bundle/release/app-release-signed.aab